; calc84maniac's method
; combine the highest nybble and lowest nybble together
; assume HL contains the instruction

; Decode a U8 instruction by using LUTs
; In:		HL - first word of an U8 instruction
; Out:		HL - address to the subroutine for further decoding
; Destroys:	All
; Test:		Undone
decodeLUT:
	ld	a,		h
	and	$f0				; higher nybble in A
	ld	h,		a
	ld	a,		l
	and	$0f				; lower nybble in A
	or	h				; combine 2 parts together

	ld	h,		(shr table_decode, 8) and $ff
	ld	l,		a
	add	hl,		hl		; multiply index by 2

	db	(($ + $ff) and $ff00) - $ dup $ff
table_decode:
; MOV	Rn,	#imm8
	dw	movR8imm			; 0000 0000
	dw	movR8imm			; 0000 0001
	dw	movR8imm			; 0000 0010
	dw	movR8imm			; 0000 0011
	dw	movR8imm			; 0000 0100
	dw	movR8imm			; 0000 0101
	dw	movR8imm			; 0000 0110
	dw	movR8imm			; 0000 0111
	dw	movR8imm			; 0000 1000
	dw	movR8imm			; 0000 1001
	dw	movR8imm			; 0000 1010
	dw	movR8imm			; 0000 1011
	dw	movR8imm			; 0000 1100
	dw	movR8imm			; 0000 1101
	dw	movR8imm			; 0000 1110
	dw	movR8imm			; 0000 1111

; ADD	Rn,	#imm8
	dw	addR8imm			; 0001 0000
	dw	addR8imm			; 0001 0001
	dw	addR8imm			; 0001 0010
	dw	addR8imm			; 0001 0011
	dw	addR8imm			; 0001 0100
	dw	addR8imm			; 0001 0101
	dw	addR8imm			; 0001 0110
	dw	addR8imm			; 0001 0111
	dw	addR8imm			; 0001 1000
	dw	addR8imm			; 0001 1001
	dw	addR8imm			; 0001 1010
	dw	addR8imm			; 0001 1011
	dw	addR8imm			; 0001 1100
	dw	addR8imm			; 0001 1101
	dw	addR8imm			; 0001 1110
	dw	addR8imm			; 0001 1111

; AND	Rn,	#imm8
	dw	andR8imm			; 0010 0000
	dw	andR8imm			; 0010 0001
	dw	andR8imm			; 0010 0010
	dw	andR8imm			; 0010 0011
	dw	andR8imm			; 0010 0100
	dw	andR8imm			; 0010 0101
	dw	andR8imm			; 0010 0110
	dw	andR8imm			; 0010 0111
	dw	andR8imm			; 0010 1000
	dw	andR8imm			; 0010 1001
	dw	andR8imm			; 0010 1010
	dw	andR8imm			; 0010 1011
	dw	andR8imm			; 0010 1100
	dw	andR8imm			; 0010 1101
	dw	andR8imm			; 0010 1110
	dw	andR8imm			; 0010 1111

; OR	Rn,	#imm8
	dw	orR8imm				; 0011 0000
	dw	orR8imm				; 0011 0001
	dw	orR8imm				; 0011 0010
	dw	orR8imm				; 0011 0011
	dw	orR8imm				; 0011 0100
	dw	orR8imm				; 0011 0101
	dw	orR8imm				; 0011 0110
	dw	orR8imm				; 0011 0111
	dw	orR8imm				; 0011 1000
	dw	orR8imm				; 0011 1001
	dw	orR8imm				; 0011 1010
	dw	orR8imm				; 0011 1011
	dw	orR8imm				; 0011 1100
	dw	orR8imm				; 0011 1101
	dw	orR8imm				; 0011 1110
	dw	orR8imm				; 0011 1111
 
 ; XOR	Rn,	#imm8
 	dw	xorR8imm			; 0100 0000
	dw	xorR8imm			; 0100 0001
	dw	xorR8imm			; 0100 0010
	dw	xorR8imm			; 0100 0011
	dw	xorR8imm			; 0100 0100
	dw	xorR8imm			; 0100 0101
	dw	xorR8imm			; 0100 0110
	dw	xorR8imm			; 0100 0111
	dw	xorR8imm			; 0100 1000
	dw	xorR8imm			; 0100 1001
	dw	xorR8imm			; 0100 1010
	dw	xorR8imm			; 0100 1011
	dw	xorR8imm			; 0100 1100
	dw	xorR8imm			; 0100 1101
	dw	xorR8imm			; 0100 1110
	dw	xorR8imm			; 0100 1111

; CMPC	Rn,	#imm8
 	dw	cmpcR8imm			; 0101 0000
	dw	cmpcR8imm			; 0101 0001
	dw	cmpcR8imm			; 0101 0010
	dw	cmpcR8imm			; 0101 0011
	dw	cmpcR8imm			; 0101 0100
	dw	cmpcR8imm			; 0101 0101
	dw	cmpcR8imm			; 0101 0110
	dw	cmpcR8imm			; 0101 0111
	dw	cmpcR8imm			; 0101 1000
	dw	cmpcR8imm			; 0101 1001
	dw	cmpcR8imm			; 0101 1010
	dw	cmpcR8imm			; 0101 1011
	dw	cmpcR8imm			; 0101 1100
	dw	cmpcR8imm			; 0101 1101
	dw	cmpcR8imm			; 0101 1110
	dw	cmpcR8imm			; 0101 1111

; ADDC	Rn,	#imm8
 	dw	addcR8imm			; 0110 0000
	dw	addcR8imm			; 0110 0001
	dw	addcR8imm			; 0110 0010
	dw	addcR8imm			; 0110 0011
	dw	addcR8imm			; 0110 0100
	dw	addcR8imm			; 0110 0101
	dw	addcR8imm			; 0110 0110
	dw	addcR8imm			; 0110 0111
	dw	addcR8imm			; 0110 1000
	dw	addcR8imm			; 0110 1001
	dw	addcR8imm			; 0110 1010
	dw	addcR8imm			; 0110 1011
	dw	addcR8imm			; 0110 1100
	dw	addcR8imm			; 0110 1101
	dw	addcR8imm			; 0110 1110
	dw	addcR8imm			; 0110 1111

; CMP	Rn,	#imm8
 	dw	cmpR8imm			; 0111 0000
	dw	cmpR8imm			; 0111 0001
	dw	cmpR8imm			; 0111 0010
	dw	cmpR8imm			; 0111 0011
	dw	cmpR8imm			; 0111 0100
	dw	cmpR8imm			; 0111 0101
	dw	cmpR8imm			; 0111 0110
	dw	cmpR8imm			; 0111 0111
	dw	cmpR8imm			; 0111 1000
	dw	cmpR8imm			; 0111 1001
	dw	cmpR8imm			; 0111 1010
	dw	cmpR8imm			; 0111 1011
	dw	cmpR8imm			; 0111 1100
	dw	cmpR8imm			; 0111 1101
	dw	cmpR8imm			; 0111 1110
	dw	cmpR8imm			; 0111 1111

; MOV	Rn,	Rm
	dw	movR8R8				; 1000 0000

; ADD	Rn,	Rm
	dw	addR8R8				; 1000 0001

; AND	Rn,	Rm
	dw	andR8R8				; 1000 0010

; OR	Rn,	Rm
	dw	orR8R8				; 1000 0011

; XOR	Rn,	Rm
	dw	xorR8R8				; 1000 0100

; CMPC	Rn,	Rm
	dw	cmpcR8R8			; 1000 0101

; ADDC	Rn,	Rm
	dw	addcR8R8			; 1000 0110

; CMP	Rn,	Rm
	dw	cmpR8R8				; 1000 0111

; SUB	Rn,	Rm
	dw	subR8R8				; 1000 1000

; SUBC	Rn,	Rm
	dw	subcR8R8			; 1000 1001

; SLL	Rn,	Rm
	dw	sllR8R8				; 1000 1010

; SLLC	Rn,	Rm
	dw	sllcR8R8			; 1000 1011

; SRL	Rn,	Rm
	dw	srlR8R8				; 1000 1100

; SRLC	Rn,	Rm
	dw	srlcR8R8			; 1000 1101

; SRA	Rn,	Rm
	dw	sraR8R8				; 1000 1110

; DAA	Rn,	Rm
; DAS	Rn,	Rm
; NEG	Rn,	Rm
; EXTBW	ERn
	dw	aluR8R8				; 1000 1111

; L	Rn,	[EA]
; L	Rn,	[EA+]
; L	Rn,	[ERm]
; L	Rn,	Dadr
	dw	lR8nodisp			; 1001 0000

; ST	Rn,	[EA]
; ST	Rn,	[EA+]
; ST	Rn,	[ERm]
; ST	Rn,	Dadr
	dw	stR8nodisp			; 1001 0001

; L	ERn,	[EA]
; L	ERn,	[EA+]
; L	ERn,	[ERm]
; L	ERn,	Dadr
	dw	lR16nodisp			; 1001 0010

; ST	ERn,	[EA]
; ST	ERn,	[EA+]
; ST	ERn,	[ERm]
; ST	ERn,	Dadr
	dw	stR16nodisp			; 1001 0011

; L	XRn,	[EA]
; L	XRn,	[EA+]
	dw	lR32nodisp			; 1001 0100

; ST	XRn,	[EA]
; ST	XRn,	[EA+]
	dw	stR32nodisp			; 1001 0101

; L	QRn,	[EA]
; L	QRn,	[EA+]
	dw	lR64nodisp			; 1001 0110

; ST	QRn,	[EA]
; ST	QRn,	[EA+]
	dw	stR64nodisp			; 1001 0111

; L	Rn,	Disp16[ERm]
	dw	lR8d16				; 1001 1000

; ST	Rn,	Disp16[ERm]
	dw	stR8d16				; 1001 1001

; SLL	Rn,	#width
	dw	sllR8imm			; 1001 1010

; SLLC	Rn,	#width
	dw	sllcR8imm			; 1001 1011

; SRL	Rn,	#width
	dw	srlR8imm			; 1001 1100

; SRLC	Rn,	#width
	dw	srlcR8imm			; 1001 1101

; SRA	Rn,	#width
	dw	sraR8imm			; 1001 1110

; _lDSR	Rn
	dw	ldsrR8				; 1001 1111

; SB	Rn.bit_offset
; SB	Dbitadr
	dw	sbM8				; 1010 0000

; TB	Rn.bit_offset
; TB	Dbitadr
	dw	tbM8				; 1010 0001

; RB	Rn.bit_offset
; RB	Dbitadr
	dw	rbM8				; 1010 0010

; MOV	Rn,	PSW
	dw	movR8PSW			; 1010 0011

; MOV	Rn,	EPSW
	dw	movR8EPSW			; 1010 0100

; MOV	ERn,	ELR
	dw	movR16ELR			; 1010 0101

; MOV	Rn,	CRm
	dw	movR8CR8			; 1010 0110

; MOV	Rn,	ECSR
	dw	movR8ECSR			; 1010 0111

; L	ERn,	Disp16[ERm]
	dw	lR16d16				; 1010 1000

; ST	ERn,	Disp16[ERm]
	dw	stR16d16			; 1010 1001

; MOV	ERn,	SP
	dw	movR16SP			; 1010 1010

; MOV	PSW,	Rm
	dw	movPSWR8			; 1010 1011

; MOV	EPSW,	Rm
	dw	movEPSWR8			; 1010 1100

; MOV	ELR,	ERm
	dw	movELRR16			; 1010 1101

; MOV	CRn,	Rm
	dw	movCR8R8			; 1010 1110

; MOV	ECSR,	Rm
	dw	movECSRR8			; 1010 1111

; L	ERn,	Disp6[BP]
; L	ERn,	Disp6[FP]
; ST	ERn,	Disp6[BP]
; ST	ERn,	Disp6[FP]
	dw	lstR16d6			; 1011 0000
	dw	lstR16d6			; 1011 0001
	dw	lstR16d6			; 1011 0010
	dw	lstR16d6			; 1011 0011
	dw	lstR16d6			; 1011 0100
	dw	lstR16d6			; 1011 0101
	dw	lstR16d6			; 1011 0110
	dw	lstR16d6			; 1011 0111
	dw	lstR16d6			; 1011 1000
	dw	lstR16d6			; 1011 1001
	dw	lstR16d6			; 1011 1010
	dw	lstR16d6			; 1011 1011
	dw	lstR16d6			; 1011 1100
	dw	lstR16d6			; 1011 1101
	dw	lstR16d6			; 1011 1110
	dw	lstR16d6			; 1011 1111

; Bcond	Radr
	dw	bccr8				; 1100 0000
	dw	bccr8				; 1100 0001
	dw	bccr8				; 1100 0010
	dw	bccr8				; 1100 0011
	dw	bccr8				; 1100 0100
	dw	bccr8				; 1100 0101
	dw	bccr8				; 1100 0110
	dw	bccr8				; 1100 0111
	dw	bccr8				; 1100 1000
	dw	bccr8				; 1100 1001
	dw	bccr8				; 1100 1010
	dw	bccr8				; 1100 1011
	dw	bccr8				; 1100 1100
	dw	bccr8				; 1100 1101
	dw	bccr8				; 1100 1110
	dw	bccr8				; 1100 1111

; L	Rn,	Disp6[BP]
; L	Rn,	Disp6[FP]
; ST	Rn,	Disp6[BP]
; ST	Rn,	Disp6[FP]
	dw	lstR8d6				; 1101 0000
	dw	lstR8d6				; 1101 0001
	dw	lstR8d6				; 1101 0010
	dw	lstR8d6				; 1101 0011
	dw	lstR8d6				; 1101 0100
	dw	lstR8d6				; 1101 0101
	dw	lstR8d6				; 1101 0110
	dw	lstR8d6				; 1101 0111
	dw	lstR8d6				; 1101 1000
	dw	lstR8d6				; 1101 1001
	dw	lstR8d6				; 1101 1010
	dw	lstR8d6				; 1101 1011
	dw	lstR8d6				; 1101 1100
	dw	lstR8d6				; 1101 1101
	dw	lstR8d6				; 1101 1110
	dw	lstR8d6				; 1101 1111

; ADD	ERn,	#imm7
; MOV	ERn,	#imm7
; ADD	SP,	#signed8
; MOV	PSW,	#unsigned8
; DI
; EI
; SC
; RC
; SWI	#snum
; _lDSR	#imm8
	dw	cntimm8				; 1110 0000
	dw	cntimm8				; 1110 0001
	dw	cntimm8				; 1110 0010
	dw	cntimm8				; 1110 0011
	dw	cntimm8				; 1110 0100
	dw	cntimm8				; 1110 0101
	dw	cntimm8				; 1110 0110
	dw	cntimm8				; 1110 0111
	dw	cntimm8				; 1110 1000
	dw	cntimm8				; 1110 1001
	dw	cntimm8				; 1110 1010
	dw	cntimm8				; 1110 1011
	dw	cntimm8				; 1110 1100
	dw	cntimm8				; 1110 1101
	dw	cntimm8				; 1110 1110
	dw	cntimm8				; 1110 1111

; B	Cadr
	dw	bcadr				; 1111 0000

; BL	Cadr
	dw	blcadr				; 1111 0001

; B	ERn
	dw	bR16				; 1111 0010

; BL	ERn
	dw	blR16				; 1111 0011

; MUL	ERn,	Rm
	dw	mulR16R8			; 1111 0100

; MOV	ERn,	ERm
	dw	movR16R16			; 1111 0101

; ADD	ERn,	ERm
	dw	addR16R16			; 1111 0110

; CMP	ERn,	ERm
	dw	cmpR16R16			; 1111 0111

; no corresponding instruction
	dw	illegal				; 1111 1000

; DIV	ERn,	Rm
	dw	divR16R8			; 1111 1001

; LEA	ERm
	dw	leaR16				; 1111 1010

; LEA	Disp16[ERm]
	dw	lead16				; 1111 1011

; LEA	Dadr
	dw	leadadr				; 1111 1100

; MOV	CRn,	[EA]
; MOV	CRn,	[EA+]
; MOV	CERn,	[EA]
; MOV	CERn,	[EA+]
; MOV	CXRn,	[EA]
; MOV	CXRn,	[EA+]
; MOV	CQRn,	[EA]
; MOV	CQRn,	[EA+]
; MOV	[EA],	CRm
; MOV	[EA+],	CRm
; MOV	[EA],	CERm
; MOV	[EA+],	CERm
; MOV	[EA],	CXRm
; MOV	[EA+],	CXRm
; MOV	[EA],	CQRm
; MOV	[EA+],	CQRm
	dw	movCREA				; 1111 1101

; PUSH	Rn
; PUSH	ERn
; PUSH	XRn
; PUSH	QRn
; PUSH	lepa
; POP	Rn
; POP	ERn
; POP	XRn
; POP	QRn
; POP	lepa
	dw	pushpop				; 1111 1110

; CPLC
; _uDSR
; RT
; RTI
; INC	[EA]
; DEC	[EA]
; NOP
; BRK
	dw	misc				; 1111 1111
